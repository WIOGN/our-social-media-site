let socketio,CommentModel,VotingModel;_728‍.x([["default",()=>_728‍.o],["NScommentsystem",()=>NScommentsystem]]);_728‍.w("socket.io",[["default",["socketio"],function(v){socketio=v}]]);_728‍.w("../models/commentModel",[["default",["CommentModel"],function(v){CommentModel=v}]]);_728‍.w("../models/imageVoting",[["default",["VotingModel"],function(v){VotingModel=v}]]);




const handleCommentSocket = (io) => {
    _728‍.u(NScommentsystem = io.of('/commentsystem'))

    NScommentsystem.on('connection', async (socket) => {

        socket.on('joinRoom', async (data) => {
            //room is image name
            socket.join(data.room);

            try {
                var likes = await VotingModel.countDocuments({ imageName: data.room, vote: true });
                var dislikes = await VotingModel.countDocuments({ imageName: data.room, vote: false });
                socket.emit('newVote', { likes: likes, dislikes: dislikes });
                var comments = await CommentModel.find({ imageName: data.room }).sort({ date: -1 });
                socket.emit('OldComment', comments.map((item) => ({ comment: item.comment })));
            }
            catch (err) {
                socket.emit('OldComment', [])
            }
        });

        socket.on('newComment', (data) => {
            var newComment = new CommentModel({
                imageName: data.room,
                comment: data.comment
            });
            newComment.save();

            NScommentsystem.to(data.room).emit('newComment', { comment: data.comment });
        });

        socket.on('newVote', async (data) => {

            try {
                var newVote = new VotingModel({
                    imageName: data.room,
                    vote: data.vote
                });

                await newVote.save();

                var likes = await VotingModel.countDocuments({ imageName: data.room, vote: true });
                var dislikes = await VotingModel.countDocuments({ imageName: data.room, vote: false });

                NScommentsystem.to(data.room).emit('newVote', { likes: likes, dislikes: dislikes });
            }
            catch (err) {
                _728‍.g.console.log(err);
            }
        });

    });
}

_728‍.d(handleCommentSocket);
       var NScommentsystem;